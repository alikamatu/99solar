generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model users {
  id                  String                @id @default(uuid()) @db.Uuid
  name                String
  email               String                @unique
  password            String
  role                String                @default("customer") @db.VarChar
  bids_placed         Int                   @default(0)
  active_bids         Int                   @default(0)
  won_bids            Int                   @default(0)
  reset_token         String?
  reset_token_expiry  DateTime?
  verification_code   String?
  code_expires_at     DateTime?
  is_verified         Boolean               @default(false)
  created_at          DateTime              @default(now())
  updated_at          DateTime              @default(now()) @updatedAt
  verizon_files       verizon_files[]
  uploaded_files      uploaded_files[]
  bids                bids[]
  awarded_bids        awarded_bids[]
  invoices            invoice[]
  email_notifications email_notifications[]
}

model verizon_files {
  id          String   @id @default(uuid()) @db.Uuid
  file_name   String
  uploaded_by String   @db.Uuid
  upload_time DateTime @default(now())
  cleaned     Boolean  @default(false)
  user        users    @relation(fields: [uploaded_by], references: [id])
  lots        lots[]
}

model uploaded_files {
  id             String   @id @default(uuid())
  filename       String
  processed_name String?
  user_id        String   @db.Uuid
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  user           users    @relation(fields: [user_id], references: [id])
}

model lots {
  id                 String         @id @default(uuid()) @db.Uuid
  verizon_file_id    String?        @db.Uuid
  lot_number         String
  item_description   String?
  grade              String?
  quantity           Int?
  base_price         Float?
  commission_rate    Float          @default(0.10)
  oem                String?
  sku                String?
  prop65_warning     String?
  description        String?
  disposition        String?        @db.VarChar
  unit_awarded_price Float?
  available_from     DateTime?
  available_to       DateTime?
  created_at         DateTime       @default(now())
  updated_at         DateTime       @updatedAt
  verizon_file       verizon_files? @relation(fields: [verizon_file_id], references: [id])
  bids               bids[]
  awarded_bids       awarded_bids[]
}

model bids {
  id           String    @id @default(uuid()) @db.Uuid
  user_id      String    @db.Uuid
  lot_id       String    @db.Uuid
  bid_amount   Float
  submitted_at DateTime  @default(now())
  status       String    @default("pending") @db.VarChar
  bid_time     DateTime?
  user         users     @relation(fields: [user_id], references: [id])
  lot          lots      @relation(fields: [lot_id], references: [id])
}

model awarded_bids {
  id          String @id @default(uuid())
  lot_id      String @db.Uuid
  awarded_to  String @db.Uuid
  final_price Float
  commission  Float
  lot         lots   @relation(fields: [lot_id], references: [id])
  user        users  @relation(fields: [awarded_to], references: [id])
}

model invoice {
  id              String   @id @default(uuid())
  user_id         String   @db.Uuid
  awarded_bid_ids String[]
  invoice_number  String   @unique
  generated_at    DateTime @default(now())
  total_amount    Float
  pdf_url         String?
  user            users    @relation(fields: [user_id], references: [id])
}

model email_notifications {
  id                Int       @id @default(autoincrement())
  user_id           String?   @db.Uuid
  subject           String
  message           String
  notification_type String?
  is_sent           Boolean   @default(false)
  sent_at           DateTime?
  created_at        DateTime  @default(now())
  user              users?    @relation(fields: [user_id], references: [id])
}
